# -*- coding: utf-8 -*-
"""W2 - Data Gathering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dr_5cJh17erT1LAP6Gx9zBGyW33Rbj_7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from urllib.request import urlopen
from bs4 import BeautifulSoup
import re
from pylab import rcParams

html = urlopen("http://www.hubertiming.com/results/2017GPTR10K")

soup = BeautifulSoup(html, 'lxml')    # Get Raw HTML and Break into Python Objects
#print(type(soup))

#print(soup.title)    # Get the Title

text = soup.get_text()    # Print the Text
#print(soup.text)

#print(soup.find_all('a'))    # Print HTML Tags

for link in soup.find_all("a"):   # Print href values in "a" tags
    #print(link.get("href"))

rows = soup.find_all('tr')    # Print the first 10 table rows only
#print(rows[:10])

for row in rows:    # Print data in cells of rows stored as list    
    row_td = row.find_all('td')
#print(row_td, type(row_td))

str_cells = str(row_td)   # Print extracted text without html tags
cleantext = BeautifulSoup(str_cells, "lxml").get_text()
#print(cleantext)

list_rows = []    # Prints clean text from row tags
for row in rows:
    str_cells = str(row.find_all('td'))
    clean = re.compile('<.*?>')
    cleaned = (re.sub(clean, '',str_cells))
    list_rows.append(cleaned)
#print(cleaned, type(cleaned))

df = pd.DataFrame(list_rows)    # Pandas dataframe of 10 rows
#df.head(10)

dfsplit = df[0].str.split(',',expand=True)   # Split rows by "," and print top 10
#dfsplit.head(10)

dfsplit[0] = df1[0].str.strip('[')    # Split rows by "[" and print top 10
#split.head(10)

all_header = []   # Print all headers of the table using dataframe
col_str = str(soup.find_all('th'))
headers = BeautifulSoup(col_str, "lxml").get_text()
all_header.append(headers)
dfheader = pd.DataFrame(all_header)
#dfheader.head()

dfheadersplit = dfheader[0].str.split(',', expand=True)   # Print all headers after splitting them
#dfheadersplit.head()

frames = [dfheadersplit, dfsplit]   # Concatenate two dataframes
dfframes = pd.concat(frames)
#dfframes.head(10)

dftable = dfframes.rename(columns=dfframes.iloc[0])   # Rename the header as first row
#dftable.head(10)

#dftable.info()    # Print datafram information
#dftable.shape

dfcleanedtable = dftable.dropna(axis=0, how='any')    # Print after droping rows with missing values
#dfcleanedtable.info()
#dfcleanedtable.shape

dftable = dfcleanedtable.drop(dfcleanedtable.index[0])    # Print after droping first row
#dftable.head(10)

dftable.rename(columns={'[Place': 'Place'},inplace=True)    # Print after renaming header values
dftable.rename(columns={' Team]': 'Team'},inplace=True)
#dftable.head(10)

dftable['Team'] = dftable['Team'].str.strip(']')
#dftable.head(10)

time_list = dftable[' Chip Time'].tolist()
time_mins = []    # You can use a for loop to convert 'Chip Time' to minutes
for i in time_list:
    if len(i.split(":")) == 2:
        m, s = i.split(':')
        math = (int(m) * 60 + int(s))/60
    if len(i.split(":")) == 3:
        h, m, s = i.split(':')
        math = (int(h) * 3600 + int(m) * 60 + int(s))/60
    time_mins.append(math)
#print(time_mins)

dftable['Runner_mins'] = time_mins    # Add Runner minutes to main table
#dftable.head(10)

#dftable.describe(include=[np.number])   # Print list of explanatory statistics for the dataframe

rcParams['figure.figsize'] = 15, 5    # Output Boxplot of the df statistics
dftable.boxplot(column='Runner_mins')
plt.grid(True, axis='y')
plt.ylabel('Chip Time')
plt.xticks([1], ['Runners'])

x = dftable['Runner_mins']    # Output normal distribution
ax = sns.distplot(x, hist=True, kde=True, rug=False, color='m', bins=25, hist_kws={'edgecolor':'black'})
plt.show()

f_fuko = dftable.loc[dftable[' Gender']==' F']['Runner_mins']    # Output statistical distribution
m_fuko = dftable.loc[dftable[' Gender']==' M']['Runner_mins']
sns.distplot(f_fuko, hist=True, kde=True, rug=False, hist_kws={'edgecolor':'black'}, label='Female')
sns.distplot(m_fuko, hist=False, kde=True, rug=False, hist_kws={'edgecolor':'black'}, label='Male')
plt.legend()

g_stats = dftable.groupby(" Gender", as_index=True).describe()    # Group by Gender
#print(g_stats)

dftable.boxplot(column='Runner_mins', by=' Gender')    # Boxplot Comparision after grouping by gender
plt.ylabel('Chip Time')
plt.suptitle("")